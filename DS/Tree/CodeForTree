/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>

using namespace std;

struct Tree {
    struct Tree *left;
    struct Tree *right;
    int data;
};

struct Tree *root;

struct Queue {
    int size;
    int rear, front;
    struct Tree *data[6];
};

int isEmpty(struct Queue *q) {
    if (q->rear==q->front){
     cout<<"q is empty";
     return -1;
    }    
    return 0;
}
void initlize_q(struct Queue *q) {
    q->size=10;
    q->rear=q->front=-1;
}

void display(struct Queue *q) {
    cout<<" rear="<<q->rear;
    cout<<" front="<<q->front;
}

int isFull(struct Queue *q) {
    if (q->rear==q->size-1){
     cout<<"q is full";
     return -1;
    }    
    return 0;
}

void enqueue(struct Queue *q, struct Tree *node) {

    if (isFull(q)){
     cout<<"q is full";
     return;
    }
    q->data[++(q->rear)]=node;
}

Tree* dequeue(struct Queue *q) {

    if (q->rear==q->front){
     cout<<"\nq is empty";
     return NULL;
    }
    return q->data[++(q->front)];
}

void createTree(struct Queue *q)
{
    int val;
    cout<<"\n Enter value of root";
    cin>>val;
    root = new Tree();
    root->data = val;
    root->left=root->right=NULL;
    
    // enter root address in Queue 
    enqueue(q, root);
    //int flag=1;
    //Now enter left & right child
    while( (! isEmpty(q)) ){ //&& flag) {
        //dequeue from Queue
        struct Tree *parent = dequeue(q);
        //left node
        cout<<"\n Enter value for left node of "<<parent->data;
        cin>>val;
        if ( val != -1) { // left node NOT empty
            struct Tree *temp = new Tree();
            temp->data = val;
            temp->left=temp->right=NULL;
            parent->left =temp;
            enqueue(q, temp);
        }    
        //right node
        cout<<"\n Enter value for right node of "<<parent->data;
        cin>>val;
        if ( val != -1) { // right node NOT empty
            struct Tree *temp = new Tree();
            temp->data = val;
            temp->left=temp->right=NULL;
            parent->right =temp;
            enqueue(q, temp);
        }    
    }
    
}

int main()
{
    struct Queue q;
    /*initlize_q(&q); // pass address
    display(&q);
    enqueue(5,&q);
    enqueue(15,&q);
    enqueue(7,&q);
    display(&q);
    cout<<"\ndeQ="<<dequeue(&q);
    cout<<"deQ="<<dequeue(&q);
    cout<<"deQ="<<dequeue(&q);
    cout<<"deQ="<<dequeue(&q);
    */
    createTree(&q);
    return 0;
}
