/******************************************************************************

Link linst loop detection and remove loop.
slow & fast pointer . Add one pointer prev which like 

slow=slow->next;
prev = fast;
fast=fast->next->next;

*******************************************************************************/
#include <stdio.h>
#include <iostream>
using namespace std;

#define setbit(num,n) (num ^ n)   

struct Node {
    int data;
    struct Node *next;
    
    Node(int data) {
        this->data= data;
        
    }
};

int fact(int n) {
    if (n == 1) 
     return 1;
    else 
     return( n*fact(n-1) ); 
}


void loopDetect(struct Node *head ){
struct Node *temp = head;
    for(int i=0; i< 8; i++) {
        cout<<" " <<temp->data;
        temp =temp->next;
    }
    
    struct Node *slow = head;
    struct Node *fast = head;
    struct Node *prev = head;
    while ((slow !=NULL) || (fast !=NULL) || (fast->next !=NULL)) {
        
        if ( (slow != head) &&slow == fast ) {
            cout<<"\n loop detected="<<slow->data << " "<<fast->data;
            break;
        }
        
        slow=slow->next;
        prev = fast;
        fast=fast->next->next;
        
    }
    prev->next=NULL;
    cout<<"\n Remove loop \n";
    temp = head;
    while (temp !=NULL) {
        cout<<" " <<temp->data;
        temp= temp->next;
    }
    //removeloop(slow,prev);
}

int main()
// 2    0010
//4 ->> 0100 => 0110

//fact 

{
    printf("Hello World");
    cout <<" " << setbit(4,2);

    cout<< "\nfact= "<<fact(4)<<"\n";
    
    Node* head = new Node(50);
    head->next = head;
    head->next = new Node(20);
    head->next->next = new Node(15);
    head->next->next->next = new Node(4);
    head->next->next->next->next = new Node(10);
    
    /* Create a loop for testing */
    head->next->next->next->next->next = head->next->next;
    
    loopDetect(head);
    return 0;
}
