1. What is a race condition, and how can it be avoided with pthreads?
=> When  Multiple thread tring to access Shared resource concurrently, Execution order unpredictable. ie. order is non-deterministic.
To avoid race condition below methods
    1. Mutex : lock resources for exclusive access.
    2. Conditional wait :coordinate thread 
    3. Atomic Operations: Use atomic operations to avoid locking where possible.(TODO)
2. What is the purpose of pthread_self()?
=>it retrun thread ID of current running thread.
   ex.
    void* thread_func(void* arg) {
    printf("Thread ID: %lu\n", (unsigned long)pthread_self());
    return NULL;
}
3. What is the difference between pthread_mutex_lock() and pthread_mutex_trylock()?
=> pthread_mutex_lock - It block threading Until it is not avaliable.
   pthread_mutex_trylock - It not block it return EBUSY  when  resource not avaliable. 
4. What difference between Mutex & semaphor?
=> Mutex - one thread at time,it provide exclusive access to a shared resource.
    unlock only those thread who locked it.
   Semaphore - control access to resoruce pool, allow to access multiple thread.
            Any thread can release a semaphore.

